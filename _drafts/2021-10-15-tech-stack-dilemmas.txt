---
layout: post
title:  "Tech Stack Dilemmas"
description: "How do you choose"
date:   2021-10-15 10:00:00 +0000
---

I‚Äôve been spending the past few days trying to think of the ‚Äòperfect‚Äô tech stack, for a new app that I‚Äôm working on. 

My latest idea is an app to make it easier to offer a discount on your Gumroad products, according to the country of the purchaser. 

So, your fans from around the world can buy your product at a price that suits their local economy. 

It‚Äôs a pretty simple idea but it does require some development. So I‚Äôve been thinking of how to get started. And I‚Äôve going round the houses with this decision. ü§°

So far, I‚Äôve considered the following:

## AWS Lambda, Serverless Framework

It‚Äôs beguiling but seems to become immediately complex. I think I have to learn a new language (Python, JavaScript) and DBMS (DynamoDB) to be productive. 

Plus, I‚Äôm tied into AWS, which I don‚Äôt want. 

Perhaps if I was working with this stack every day, it might be easier, but I‚Äôm feeling it‚Äôs too much of an uphill climb. 

Trying to be ruthless with my time, I‚Äôve killed this idea. 

## Hasura/Postgresql and JS frontend

Hasura is a trendy GraphQL API layer for your PostgreSQL databases. It‚Äôs a low-code way to generate APIs quickly.

The general opinion on Hasura is pretty good. I can design tables, and have a GraphQL API up and running. 

But the problem is that I have to self-host a Postgres database, and Hasura too. The Hasura Cloud offering is just too expensive, so I‚Äôd need to self host.

Plus, I don‚Äôt know how long Hasura is going to be around for. I don‚Äôt want to build something today using an API that‚Äôs going to be withdrawn tomorrow. 

## In praise of Spring Boot and PostgreSQL for hobby projects 

Boring, unsexy, and built for ‚Äúthe enterprise‚Äù. 

I‚Äôm not going to win any innovation awards for using Spring and MVC. But I think it‚Äôs time to reconsider that stance. 

Over the last year or so, I have created a few little hobby projects, and been playing around with frameworks and languages that are new to me. 

I‚Äôve learned the basics of server side JavaScript and creating APIs with Express and Node.js. 

I‚Äôve also dabbled in AWS Lambda functions. I played around with service framework. The  I got fed up because finding up-to-date documentation and examples was really hard, and I was bewildered at the number of objects it was creating in my AWS account just to deploy an API.

One of these projects was a simple polling app. It was all Serverless with Lambda and a Svelte single-page-app front end. 

But then I realised I was spending such a huge amount of time keeping up with it all. And yet **I already have the knowledge to create a web app**. I‚Äôve been doing it since 1998 with PHP.

These days I wouldn‚Äôt use PHP. I wouldn‚Äôt know how to properly secure it. 

So why not use the technologies I already know and use for my customers every day??

**Java with Spring is the development stack that I‚Äôm most familiar with.**

Spring‚Äôs been around for over 10 years. _It doesn‚Äôt change very often_. It‚Äôs backed by a big company (VMware/Pivotal) and is used in all the slow, dull enterprise environments. 

Perfect.

I ignored Java/Spring for my own personal projects because it‚Äôs not very exciting. And because I thought I should be learning something new. 

But Spring isn‚Äôt going anywhere. And it comes with batteries included. No need to pull in some obscure dependency just to get basic functionality. 

Everything is curated, feature-complete, and stable. 

So why the heck didn‚Äôt I consider it before?

For me, it‚Äôs a perfect choice to just get something done, in a mature ecosystem. Everything has already been thought of, from database migrations with Flyway, to REST APIs.

### Templates and MVC are very cool indeed 

I‚Äôm not building a billion-scale microservice. It‚Äôs literally a CRUD app with some fancy bits. 

Thymeleaf templates let me create some nice pages and inject some data onto them. 

And I can even do this with livereload in the browser. Reloading the browser every time I change a template. Wow!

Sprinkle some styling a little dynamic behaviour with Htmx, and I‚Äôve got a nice looking app.

### Easy to run

I can run the app on a basic Linode or Hetzner server (with plenty of room for other apps too).

Building is just a simple mvn clean package on my laptop. 

Then I RSYNC the jar to the server. Ha ha. Yes! RSYNC! People literally laugh at me on the street for this. 

How does the app run?

Install a JDK. My linux distribution comes with a stable JDK, so i just use that. 

Then java -jar. Done. It runs the database migrations and starts the app. 

I mean, it‚Äôs so laughably simple, that I don‚Äôt know why I‚Äôve never considered it before. 


